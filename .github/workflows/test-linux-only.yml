---
  name: CI
  
  on:
    pull_request:
      branches: [master, nightly]
      types: [opened, synchronize, reopened]
    push:
      branches: [master, nightly]
    workflow_dispatch:
  
  concurrency:
    group: "${{ github.workflow }}-${{ github.ref }}"
    cancel-in-progress: true
  
  jobs:
    github_env:
      name: GitHub Env Debug
      runs-on: ubuntu-latest
  
      steps:
        - name: Dump github context
          run: echo "$GITHUB_CONTEXT"
          shell: bash
          env:
            GITHUB_CONTEXT: ${{ toJson(github) }}
  
    setup_release:
      name: Setup Release
      outputs:
        publish_release: ${{ steps.setup_release.outputs.publish_release }}
        release_body: ${{ steps.setup_release.outputs.release_body }}
        release_commit: ${{ steps.setup_release.outputs.release_commit }}
        release_generate_release_notes: ${{ steps.setup_release.outputs.release_generate_release_notes }}
        release_tag: ${{ steps.setup_release.outputs.release_tag }}
        release_version: ${{ steps.setup_release.outputs.release_version }}
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
  
        - name: Setup Release
          id: setup_release
          uses: LizardByte/setup-release-action@v2024.608.210128
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
  
    setup_flatpak_matrix:
      name: Setup Flatpak Matrix
      runs-on: ubuntu-latest
      steps:
        - name: Set release details
          id: flatpak_matrix
          # https://www.cynkra.com/blog/2020-12-23-dynamic-gha
          run: |
            # determine which architectures to build
            if [[ "${{ github.event_name }}" == "push" ]]; then
              matrix=$((
                echo '{ "arch" : ["x86_64", "aarch64"] }'
              ) | jq -c .)
            else
              matrix=$((
                echo '{ "arch" : ["x86_64"] }'
              ) | jq -c .)
            fi
  
            echo $matrix
            echo $matrix | jq .
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
  
      outputs:
        matrix: ${{ steps.flatpak_matrix.outputs.matrix }}
  
   
  
    build_linux:
      name: Linux ${{ matrix.type }}
      runs-on: ubuntu-${{ matrix.dist }}
      needs: [setup_release]
      strategy:
        fail-fast: false  # false to test all, true to fail entire job if any fail
        matrix:
          include:  # package these differently
            - type: AppImage
              EXTRA_ARGS: '-DSUNSHINE_BUILD_APPIMAGE=ON'
              dist: 22.04
  
      steps:
        - name: Maximize build space
          uses: easimon/maximize-build-space@v10
          with:
            root-reserve-mb: 30720
            remove-dotnet: 'true'
            remove-android: 'true'
            remove-haskell: 'true'
            remove-codeql: 'true'
            remove-docker-images: 'true'
  
        - name: Checkout
          uses: actions/checkout@v4
          with:
            submodules: recursive
  
        - name: Install wget
          run: |
            sudo apt-get update -y
            sudo apt-get install -y \
              wget
  
        - name: Install CUDA
          env:
            CUDA_VERSION: 11.8.0
            CUDA_BUILD: 520.61.05
          timeout-minutes: 4
          run: |
            url_base="https://developer.download.nvidia.com/compute/cuda/${CUDA_VERSION}/local_installers"
            url="${url_base}/cuda_${CUDA_VERSION}_${CUDA_BUILD}_linux.run"
            sudo wget -q -O /root/cuda.run ${url}
            sudo chmod a+x /root/cuda.run
            sudo /root/cuda.run --silent --toolkit --toolkitpath=/usr/local/cuda --no-opengl-libs --no-man-page --no-drm
            sudo rm /root/cuda.run
  
        - name: Setup Dependencies Linux
          timeout-minutes: 5
          run: |
            # allow newer gcc
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
  
            # allow libfuse2 for appimage on 22.04
            sudo add-apt-repository universe
  
            # libx11-xcb-dev and libxcb-dri3-dev are required for building libva
            sudo apt-get install -y \
              build-essential \
              cmake \
              gcc-10 \
              g++-10 \
              libayatana-appindicator3-dev \
              libavdevice-dev \
              libcap-dev \
              libcurl4-openssl-dev \
              libdrm-dev \
              libevdev-dev \
              libfuse2 \
              libminiupnpc-dev \
              libnotify-dev \
              libnuma-dev \
              libopus-dev \
              libpulse-dev \
              libssl-dev \
              libvdpau-dev \
              libwayland-dev \
              libx11-dev \
              libx11-xcb-dev \
              libxcb-dri3-dev \
              libxcb-shm0-dev \
              libxcb-xfixes0-dev \
              libxcb1-dev \
              libxfixes-dev \
              libxrandr-dev \
              libxtst-dev \
              python3
  
            # clean apt cache
            sudo apt-get clean
            sudo rm -rf /var/lib/apt/lists/*
  
            # Update gcc alias
            # https://stackoverflow.com/a/70653945/11214013
            sudo update-alternatives --install \
              /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
              --slave /usr/bin/g++ g++ /usr/bin/g++-10 \
              --slave /usr/bin/gcov gcov /usr/bin/gcov-10 \
              --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
              --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10
  
        - name: Setup python
          id: python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
  
        - name: Build latest libva
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          timeout-minutes: 5
          run: |
            gh release download --archive=tar.gz --repo=intel/libva
            tar xzf libva-*.tar.gz && rm libva-*.tar.gz
            cd libva-*
            ./autogen.sh --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu \
              --enable-drm \
              --enable-x11 \
              --enable-glx \
              --enable-wayland \
              --without-legacy # emgd, nvctrl, fglrx
            make -j $(nproc)
            sudo make install
            cd .. && rm -rf libva-*
  
        - name: Build Linux
          env:
            BRANCH: ${{ github.head_ref || github.ref_name }}
            BUILD_VERSION: ${{ needs.setup_release.outputs.release_tag }}
            COMMIT: ${{ needs.setup_release.outputs.release_commit }}
          timeout-minutes: 10
          run: |
            echo "nproc: $(nproc)"
  
            mkdir -p build
            mkdir -p artifacts
  
            cd build
            cmake \
              -DBUILD_WERROR=ON \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CUDA_COMPILER:PATH=/usr/local/cuda/bin/nvcc \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DSUNSHINE_ASSETS_DIR=share/sunshine \
              -DSUNSHINE_EXECUTABLE_PATH=/usr/bin/sunshine \
              -DSUNSHINE_ENABLE_WAYLAND=ON \
              -DSUNSHINE_ENABLE_X11=ON \
              -DSUNSHINE_ENABLE_DRM=ON \
              -DSUNSHINE_ENABLE_CUDA=ON \
              ${{ matrix.EXTRA_ARGS }} \
              ..
            make -j $(expr $(nproc) - 1)  # use all but one core
  
        - name: Set AppImage Version
          if: |
            matrix.type == 'AppImage'
          run: |
            version=${{ needs.setup_release.outputs.release_tag }}
            echo "VERSION=${version}" >> $GITHUB_ENV
  
        - name: Package Linux - AppImage
          if: ${{ matrix.type == 'AppImage' }}
          working-directory: build
          run: |
            # install sunshine to the DESTDIR
            make install DESTDIR=AppDir
  
            # custom AppRun file
            cp -f ../packaging/linux/AppImage/AppRun ./AppDir/
            chmod +x ./AppDir/AppRun
  
            # variables
            DESKTOP_FILE="${DESKTOP_FILE:-sunshine.desktop}"
            ICON_FILE="${ICON_FILE:-sunshine.png}"
  
            # AppImage
            # https://docs.appimage.org/packaging-guide/index.html
            wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy-x86_64.AppImage
  
            # https://github.com/linuxdeploy/linuxdeploy-plugin-gtk
            sudo apt-get install libgtk-3-dev librsvg2-dev -y
            wget -q https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh
            chmod +x linuxdeploy-plugin-gtk.sh
            export DEPLOY_GTK_VERSION=3
  
            ./linuxdeploy-x86_64.AppImage \
              --appdir ./AppDir \
              --plugin gtk \
              --executable ./sunshine \
              --icon-file "../$ICON_FILE" \
              --desktop-file "./$DESKTOP_FILE" \
              --output appimage
  
            # move
            mv Sunshine*.AppImage ../artifacts/sunshine.AppImage
  
            # permissions
            chmod +x ../artifacts/sunshine.AppImage
  
        - name: Delete CUDA
          # free up space on the runner
          run: |
            sudo rm -rf /usr/local/cuda
  
        - name: Verify AppImage
          if: ${{ matrix.type == 'AppImage' }}
          run: |
            wget https://github.com/TheAssassin/appimagelint/releases/download/continuous/appimagelint-x86_64.AppImage
            chmod +x appimagelint-x86_64.AppImage
  
            ./appimagelint-x86_64.AppImage ./artifacts/sunshine.AppImage
  
        - name: Upload Artifacts
          uses: actions/upload-artifact@v4
          with:
            name: sunshine-linux-${{ matrix.type }}-${{ matrix.dist }}
            path: artifacts/
  
        - name: Install test deps
          run: |
            sudo apt-get update -y
            sudo apt-get install -y \
              doxygen \
              graphviz \
              python3-venv \
              x11-xserver-utils \
              xvfb
  
            # clean apt cache
            sudo apt-get clean
            sudo rm -rf /var/lib/apt/lists/*
  
        - name: Run tests
          id: test
          working-directory: build/tests
          run: |
            export DISPLAY=:1
            Xvfb ${DISPLAY} -screen 0 1024x768x24 &
  
            ./test_sunshine --gtest_color=yes
  
        - name: Generate gcov report
          # any except canceled or skipped
          if: always() && (steps.test.outcome == 'success' || steps.test.outcome == 'failure')
          id: test_report
          working-directory: build
          run: |
            ${{ steps.python.outputs.python-path }} -m pip install gcovr
            ${{ steps.python.outputs.python-path }} -m gcovr -r .. \
              --exclude-noncode-lines \
              --exclude-throw-branches \
              --exclude-unreachable-branches \
              --exclude '.*tests/.*' \
              --exclude '.*third-party/.*' \
              --xml-pretty \
              -o coverage.xml
  
        - name: Upload coverage
          # any except canceled or skipped
          if: >-
            always() &&
            (steps.test_report.outcome == 'success') &&
            startsWith(github.repository, 'LizardByte/')
          uses: codecov/codecov-action@v4
          with:
            disable_search: true
            fail_ci_if_error: true
            files: ./build/coverage.xml
            flags: ${{ runner.os }}
            token: ${{ secrets.CODECOV_TOKEN }}
            verbose: true
  
       
  
    
  
    
